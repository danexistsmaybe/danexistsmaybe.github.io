[
  {
    "objectID": "mini2.html",
    "href": "mini2.html",
    "title": "Using API Calls",
    "section": "",
    "text": "The data for this mini project was taken from the openFDA API. This API serves public data from the Food and Drug Administration about drugs, devices, and foods. It only has publicly available data, so there are no sensitive personal details. We hope to use this data to show a correlation between demographic information and certain adverse effects. We also want to see if some drugs are more likely to cause serious side effects compared to other drugs, and what reactions are most common.\nThus, we decided to scrape reports about adverse drug effects on patients, and filter to only include instances where the patient had severe side effects (Death, life threatening condition, hospitalization, etc). Each report has a unique report ID, details about the patients age and sex, what drug they used, how serious the side effects were, and what their reaction to the drug was. We can group the data by age group, sex, medication name, and create plots to show the size of each group and see if there is a causal relationship between 2 or more of the variables.\n\n\nCode\nkey &lt;- readLines(\"api_token\") # get key\n\n\nWarning in readLines(\"api_token\"): incomplete final line found on 'api_token'\n\n\n\n\n\n\n\nCode\n#Function to get data from the API. 2000 - 2020, numObservations &lt;= 1000\n\nget_fda_data &lt;- function(startYear, endYear, numObservations) {\n  \n  # make the request\n  endpoint &lt;- \"https://api.fda.gov/drug/event.json\"\n  \n  req &lt;- request(str_c(\n    endpoint,  \n    \"?api_key=\", key, \n    \"&search=serious:\\\"1\\\"+AND+receivedate:[\", \n    startYear, \n    \"0101+TO+\", \n    endYear, \n    \"1231]&limit=\",\n    numObservations\n  ))\n  resp &lt;- req_perform(req)\n  \n  # if json is desired\n  resp &lt;- resp |&gt;\n    resp_body_json()\n  \n  reportId = double()\n  patientAge = double()\n  patientSex = double()\n  reaction = character()\n  drugName = character()\n  drugIndication = character()\n  \n  for(i in 1:numObservations) {\n    \n    reportId[i-1] &lt;- resp$results[[i]]$safetyreportid\n    \n    if(is.null(resp$results[[i]]$patient$patientonsetage)) {\n      patientAge[i-1] &lt;- NA \n    } else {\n      patientAge[i-1] &lt;- resp$results[[i]]$patient$patientonsetage\n    }\n    \n    if(is.null(resp$results[[i]]$patient$patientsex)) {\n      patientSex[i-1] &lt;- NA\n    } else {\n      patientSex[i-1] &lt;- resp$results[[i]]$patient$patientsex\n    }\n    \n    if(length(resp$results[[i]]$patient$reaction) == 2) {\n      reaction[i-1] &lt;- str_c(resp$results[[i]]$patient$reaction[[1]]\n                             $reactionmeddrapt, \", \",resp$results[[i]]$\n                               patient$reaction[[2]]$reactionmeddrapt)\n    } else if(length(resp$results[[i]]$patient$reaction) == 1) {\n      reaction[i-1] &lt;- resp$results[[i]]$patient$reaction[[1]]$reactionmeddrapt\n    } else {\n      reaction[i-1] &lt;- \"\"\n    }\n    \n    drugName[i-1] &lt;- resp$results[[i]]$patient$drug[[1]]$medicinalproduct\n    \n  }\n  \n  drug_tbl &lt;- tibble(\n    reportId = parse_number(reportId),\n    patientAge = parse_number(patientAge),\n    patientSex = parse_number(patientSex),\n    drugName = drugName,\n    reaction = reaction\n  )\n  \n  drug_tbl\n  \n}\n\n# Get the data tibbles from the API\ndrugs &lt;- get_fda_data(2010, 2019, 1000)\ndrugs2 &lt;- get_fda_data(2000, 2009, 1000)\n\n# Join multiple tables\ndrugs &lt;- drugs |&gt; \n  full_join(drugs2)\n\n# Write the csv file\nwrite.csv(drugs, \"drugs_tbl.csv\")\n\n\nOur Data:\n\n\nCode\ndrugs |&gt; \n  print(n = 6)\n\n\n# A tibble: 1,998 × 5\n  reportId patientAge patientSex drugName   reaction                            \n     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;                               \n1 10003301         NA          2 IBUPROFEN  \"Dyspepsia, Renal impairment\"       \n2 10003311         76          2 LETAIRIS   \"Oedema peripheral, Fluid retention\"\n3 10003312         43          2 ILARIS     \"Pneumonia, Drug ineffective\"       \n4 10003315         NA          1 RANOLAZINE \"Death\"                             \n5 10003317         46          1 BENLYSTA   \"\"                                  \n6 10003318         59          2 BELIMUMAB  \"Tuberculosis of central nervous sy…\n# ℹ 1,992 more rows"
  },
  {
    "objectID": "mini2.html#getting-the-data",
    "href": "mini2.html#getting-the-data",
    "title": "Using API Calls",
    "section": "",
    "text": "The data for this mini project was taken from the openFDA API. This API serves public data from the Food and Drug Administration about drugs, devices, and foods. It only has publicly available data, so there are no sensitive personal details. We hope to use this data to show a correlation between demographic information and certain adverse effects. We also want to see if some drugs are more likely to cause serious side effects compared to other drugs, and what reactions are most common.\nThus, we decided to scrape reports about adverse drug effects on patients, and filter to only include instances where the patient had severe side effects (Death, life threatening condition, hospitalization, etc). Each report has a unique report ID, details about the patients age and sex, what drug they used, how serious the side effects were, and what their reaction to the drug was. We can group the data by age group, sex, medication name, and create plots to show the size of each group and see if there is a causal relationship between 2 or more of the variables.\n\n\nCode\nkey &lt;- readLines(\"api_token\") # get key\n\n\nWarning in readLines(\"api_token\"): incomplete final line found on 'api_token'\n\n\n\n\n\n\n\nCode\n#Function to get data from the API. 2000 - 2020, numObservations &lt;= 1000\n\nget_fda_data &lt;- function(startYear, endYear, numObservations) {\n  \n  # make the request\n  endpoint &lt;- \"https://api.fda.gov/drug/event.json\"\n  \n  req &lt;- request(str_c(\n    endpoint,  \n    \"?api_key=\", key, \n    \"&search=serious:\\\"1\\\"+AND+receivedate:[\", \n    startYear, \n    \"0101+TO+\", \n    endYear, \n    \"1231]&limit=\",\n    numObservations\n  ))\n  resp &lt;- req_perform(req)\n  \n  # if json is desired\n  resp &lt;- resp |&gt;\n    resp_body_json()\n  \n  reportId = double()\n  patientAge = double()\n  patientSex = double()\n  reaction = character()\n  drugName = character()\n  drugIndication = character()\n  \n  for(i in 1:numObservations) {\n    \n    reportId[i-1] &lt;- resp$results[[i]]$safetyreportid\n    \n    if(is.null(resp$results[[i]]$patient$patientonsetage)) {\n      patientAge[i-1] &lt;- NA \n    } else {\n      patientAge[i-1] &lt;- resp$results[[i]]$patient$patientonsetage\n    }\n    \n    if(is.null(resp$results[[i]]$patient$patientsex)) {\n      patientSex[i-1] &lt;- NA\n    } else {\n      patientSex[i-1] &lt;- resp$results[[i]]$patient$patientsex\n    }\n    \n    if(length(resp$results[[i]]$patient$reaction) == 2) {\n      reaction[i-1] &lt;- str_c(resp$results[[i]]$patient$reaction[[1]]\n                             $reactionmeddrapt, \", \",resp$results[[i]]$\n                               patient$reaction[[2]]$reactionmeddrapt)\n    } else if(length(resp$results[[i]]$patient$reaction) == 1) {\n      reaction[i-1] &lt;- resp$results[[i]]$patient$reaction[[1]]$reactionmeddrapt\n    } else {\n      reaction[i-1] &lt;- \"\"\n    }\n    \n    drugName[i-1] &lt;- resp$results[[i]]$patient$drug[[1]]$medicinalproduct\n    \n  }\n  \n  drug_tbl &lt;- tibble(\n    reportId = parse_number(reportId),\n    patientAge = parse_number(patientAge),\n    patientSex = parse_number(patientSex),\n    drugName = drugName,\n    reaction = reaction\n  )\n  \n  drug_tbl\n  \n}\n\n# Get the data tibbles from the API\ndrugs &lt;- get_fda_data(2010, 2019, 1000)\ndrugs2 &lt;- get_fda_data(2000, 2009, 1000)\n\n# Join multiple tables\ndrugs &lt;- drugs |&gt; \n  full_join(drugs2)\n\n# Write the csv file\nwrite.csv(drugs, \"drugs_tbl.csv\")\n\n\nOur Data:\n\n\nCode\ndrugs |&gt; \n  print(n = 6)\n\n\n# A tibble: 1,998 × 5\n  reportId patientAge patientSex drugName   reaction                            \n     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;                               \n1 10003301         NA          2 IBUPROFEN  \"Dyspepsia, Renal impairment\"       \n2 10003311         76          2 LETAIRIS   \"Oedema peripheral, Fluid retention\"\n3 10003312         43          2 ILARIS     \"Pneumonia, Drug ineffective\"       \n4 10003315         NA          1 RANOLAZINE \"Death\"                             \n5 10003317         46          1 BENLYSTA   \"\"                                  \n6 10003318         59          2 BELIMUMAB  \"Tuberculosis of central nervous sy…\n# ℹ 1,992 more rows"
  },
  {
    "objectID": "mini2.html#using-the-data",
    "href": "mini2.html#using-the-data",
    "title": "Using API Calls",
    "section": "Using the Data",
    "text": "Using the Data\n\n\nCode\nlibrary(treemapify)\n\n\nWarning: package 'treemapify' was built under R version 4.4.3\n\n\nCode\ndrugs |&gt;\n  mutate(drugName = as.character(fct_lump_n(drugName, 100))) |&gt;\n  group_by(drugName) |&gt;\n  summarize(n = n()) |&gt;\n  mutate(drugName = ifelse(\n    nchar(drugName)&gt;7, \n    str_c(substr(drugName, start=1, stop=4), \"…\"),\n    drugName\n  )) |&gt;\n  ggplot(aes(area = n, fill = drugName, label = drugName)) +\n    geom_treemap() +\n    geom_treemap_text(colour = \"white\", place = \"centre\") +\n    labs(title = \"Drug Representation Among Serious Effects\") +\n    theme_minimal() +\n    scale_fill_viridis_d(option = \"G\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\ndrugs |&gt;\n  filter(reaction == \"Death\") |&gt;\n  mutate(drugName = as.character(fct_lump_min(drugName, 1))) |&gt;\n  group_by(drugName) |&gt;\n  summarize(n = n()) |&gt;\n  mutate(drugName = ifelse(\n    nchar(drugName)&gt;10, \n    str_c(substr(drugName, start=1, stop=6), \"…\"),\n    drugName\n  )) |&gt;\n  ggplot(aes(area = n, fill = drugName, label = drugName)) +\n    geom_treemap() +\n    geom_treemap_text(colour = \"white\", place = \"centre\") +\n    labs(title = \"Drug Representation Among Deaths\") +\n    theme_minimal() +\n    scale_fill_viridis_d(option = \"A\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThese tree maps give some indication of which drugs caused the most serious side effects. In both plots, we can see that the distribution is relatively even among the drugs, as it seems that most of them only occur one or two times. Lipitor stands out as having the most incidents, and we can see that it also has one death associated with it in the second plot. This plot also reveals that Glivec, while it had appeared benign enough, actually caused the highest number of deaths in the data.\n\n\nCode\ndrugs |&gt;\n  filter(!is.na(patientAge) & patientAge &lt; 100) |&gt;\n  ggplot(aes(x = patientAge)) +\n    geom_density(fill = \"lavender\", color = \"darkblue\", size = 1) + \n    theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nUnsurprisingly, the most common age for incidents in the data set is in the sixties. However, this plot also highlights that some of the drugs affected children."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome!\nTo learn more about me, visit any of the links below."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "mini1.html#first-map-prevalence-of-depression-across-the-united-states",
    "href": "mini1.html#first-map-prevalence-of-depression-across-the-united-states",
    "title": "Visualizing Maps",
    "section": "First Map: Prevalence of Depression Across the United States",
    "text": "First Map: Prevalence of Depression Across the United States\n\n\nCode\n# First\n\n# summary by state\nPLACES_states &lt;- PLACES |&gt;\n  mutate(State = tolower(State)) |&gt;\n  group_by(State) |&gt;\n  summarize(\n    continuous = mean(DEPRESSION_CrudePrev), \n    other = mean(SLEEP_CrudePrev)\n  )\n\n# join\nchimera &lt;- states |&gt;\n  left_join(PLACES_states, by = c(\"region\" = \"State\"))\n\n# plot\nchimera |&gt;\n  ggplot(aes(x = long, y = lat, group = group)) +\n    geom_polygon(aes(fill = continuous), color = \"#222200\") +\n    coord_map() +  \n    theme_void() +  \n    scale_fill_viridis_c(option = \"E\") +\n    theme(panel.background = element_rect(fill = \"beige\")) +\n    labs(\n      title = \"Average Prevalence of Depression by State\",\n      fill = \"Mean Prevalence of Depression\",\n      caption = \"Source: CDC's PLACES Census Tract Data 2024 Release\\nhttps://data.cdc.gov/500-Cities-Places/PLACES-Census-Tract-Data-GIS-Friendly-Format-2024-/yjkw-uj5s\"\n    )"
  },
  {
    "objectID": "mini1.html#second-map-prevalence-of-lack-of-sleep-across-the-united-states",
    "href": "mini1.html#second-map-prevalence-of-lack-of-sleep-across-the-united-states",
    "title": "Visualizing Maps",
    "section": "Second Map: Prevalence of Lack of Sleep Across the United States",
    "text": "Second Map: Prevalence of Lack of Sleep Across the United States\n\n\nCode\n# First\nAVG &lt;- mean(PLACES_states$other)\n\nchimera &lt;- chimera |&gt;\n  mutate(categorical = ifelse(other&gt;AVG, \"More Than Average\", \"Less Than Average\"))\n\n# plot\nchimera |&gt;\n  ggplot(aes(x = long, y = lat, group = group)) +\n    geom_polygon(aes(fill = fct(categorical)), color = \"#353535\") +\n    coord_map() +  \n    theme_void() +  \n    scale_fill_viridis_d(option = \"F\") +\n    theme(panel.background = element_rect(fill = \"lavender\")) +\n    labs(\n      title = \"U.S. States With Higher Than Average Sleep Deprivation\",\n      subtitle = \"(where the average prevalence of sleep deprivation is 35.82%)\",\n      fill = \"Prevalence of Sleep Deprivation\",\n      caption = \"Source: CDC's PLACES Census Tract Data 2024 Release\\nhttps://data.cdc.gov/500-Cities-Places/PLACES-Census-Tract-Data-GIS-Friendly-Format-2024-/yjkw-uj5s\"\n    )\n\n\n\n\n\n\n\n\n\nDescription: This plot highlights the geographical divide between the states with a higher prevalence of sleep deprivation than average and those with a lower prevalence. The prevalence for each state is calculated by averaging the percentage across its counties; by splitting the states into two categories, it becomes extremely clear that the Southeast as a geographical region has a higher prevalence of lack of sleep. This does not seem to follow the trends observed in the map of depression; however, it would be premature to assume that sleep deprivation and depression are not correlated, as there could be many other factors contributing to the trends observed in these maps."
  },
  {
    "objectID": "mini1.html#first-map-interactive",
    "href": "mini1.html#first-map-interactive",
    "title": "Visualizing Maps",
    "section": "First Map: Interactive",
    "text": "First Map: Interactive\n\n\nCode\n# First\n\n# bins\nbins &lt;- c(15, 17.5, 20, 22.5, 25, 27.5, 30)\npal &lt;- colorBin(\"plasma\", domain = PLACES_states$depr, bins = bins)\n\n# labels\nlibrary(htmltools)\nlibrary(glue)\n\nPLACES_states &lt;- PLACES_states |&gt;\n  mutate(labels = str_c(\"&lt;u&gt;\", name, \"&lt;/u&gt;: \", round(depr,2), \"% prevalence\"))\n\nlabels &lt;- lapply(PLACES_states$labels, HTML)\n\n\n# plot\nleaflet(PLACES_states) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles(attribution = \"Source: &lt;a href='https://data.cdc.gov/500-Cities-Places/PLACES-Census-Tract-Data-GIS-Friendly-Format-2024-/yjkw-uj5s'&gt;CDC PLACES&lt;/a&gt;\") |&gt;\n  addPolygons(\n    fillColor = ~pal(depr),\n    weight = 1,\n    opacity = 1,\n    color = \"black\",\n    dashArray = \"\",\n    fillOpacity = .9,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"white\",\n      dashArray = \"\",\n      fillOpacity = .5,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, values = ~density, opacity = 0.7, title = \"Prevalence of Depression\",\n    position = \"bottomright\")\n\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data"
  }
]